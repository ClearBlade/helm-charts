{{- if not .Values.highAvailability }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cb-redis
  namespace: {{ default "clearblade" .Values.global.namespace }}
  labels:
    app: cb-redis
spec:
  selector:
    matchLabels:
      app: cb-redis
  replicas: 1
  template:
    metadata:
      labels:
        app: cb-redis
        app.kubernetes.io/name: managed-prom
    spec:
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      tolerations:
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 0
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 0
      containers:
      - name: cb-redis
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        imagePullPolicy: "IfNotPresent"
        command: ["redis-server"]
        args: ["/etc/redis/redis.conf"]
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/
        resources:
          requests:
            cpu: {{ .Values.requestCPU }}
            memory: {{ .Values.requestMemory }}
          limits:
            cpu: {{ .Values.limitCPU }}
            memory: {{ .Values.limitMemory }}
      {{- if .Values.global.monitoringEnabled }}
      - name: cb-redis-exporter
        image: oliver006/redis_exporter
        env:
          - name: REDIS_ADDR
            value: "redis://localhost:6379"
        ports:
          - containerPort: 9121
            name: metrics
        resources:
          limits:
            cpu: 250m
            memory: 180Mi
          requests:
            cpu: 102m
            memory: 180Mi
      {{- end }}
      {{- if .Values.global.tolerations }}
      tolerations:
{{ .Values.global.tolerations | toYaml | indent 6 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{ .Values.nodeSelector }}
      {{- else if .Values.global.nodeSelector }}
      nodeSelector:
        {{ .Values.global.nodeSelector }}
      {{- end }}
{{- end }}